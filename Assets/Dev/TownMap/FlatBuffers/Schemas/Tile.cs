// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Town.Tile
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Tile : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static Tile GetRootAsTile(ByteBuffer _bb) { return GetRootAsTile(_bb, new Tile()); }
  public static Tile GetRootAsTile(ByteBuffer _bb, Tile obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Tile __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TileId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool Buildable { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int BaseBuildingValue { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BaseBuildingRootTile { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Town.Tile.TileTerrainType Terrain { get { int o = __p.__offset(12); return o != 0 ? (Town.Tile.TileTerrainType)__p.bb.GetSbyte(o + __p.bb_pos) : Town.Tile.TileTerrainType.Flat; } }

  public static Offset<Town.Tile.Tile> CreateTile(FlatBufferBuilder builder,
      int tile_id = 0,
      bool buildable = false,
      int base_building_value = 0,
      int base_building_root_tile = 0,
      Town.Tile.TileTerrainType terrain = Town.Tile.TileTerrainType.Flat) {
    builder.StartTable(5);
    Tile.AddBaseBuildingRootTile(builder, base_building_root_tile);
    Tile.AddBaseBuildingValue(builder, base_building_value);
    Tile.AddTileId(builder, tile_id);
    Tile.AddTerrain(builder, terrain);
    Tile.AddBuildable(builder, buildable);
    return Tile.EndTile(builder);
  }

  public static void StartTile(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddTileId(FlatBufferBuilder builder, int tileId) { builder.AddInt(0, tileId, 0); }
  public static void AddBuildable(FlatBufferBuilder builder, bool buildable) { builder.AddBool(1, buildable, false); }
  public static void AddBaseBuildingValue(FlatBufferBuilder builder, int baseBuildingValue) { builder.AddInt(2, baseBuildingValue, 0); }
  public static void AddBaseBuildingRootTile(FlatBufferBuilder builder, int baseBuildingRootTile) { builder.AddInt(3, baseBuildingRootTile, 0); }
  public static void AddTerrain(FlatBufferBuilder builder, Town.Tile.TileTerrainType terrain) { builder.AddSbyte(4, (sbyte)terrain, 0); }
  public static Offset<Town.Tile.Tile> EndTile(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Town.Tile.Tile>(o);
  }
  public static void FinishTileBuffer(FlatBufferBuilder builder, Offset<Town.Tile.Tile> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTileBuffer(FlatBufferBuilder builder, Offset<Town.Tile.Tile> offset) { builder.FinishSizePrefixed(offset.Value); }
}


}
